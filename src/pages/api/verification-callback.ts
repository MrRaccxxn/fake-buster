import redis from "@/libs/redis";
import { resolver, auth } from "@iden3/js-iden3-auth";
import { NextApiRequest, NextApiResponse } from "next";
import path from "path";
import getRawBody from "raw-body";
import { buffer } from "stream/consumers";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const sessionId = req.query.sessionId;
  if (!sessionId || typeof sessionId !== "string")
    throw new Error("sessionId is required");

  const raw = await buffer(req);
  console.log("rawBody", raw);

  //   const raw = await getRawBody(req);
  //   console.log("raw", raw);

  const tokenStr = "eyJhbGciOiJncm90aDE2IiwiY2lyY3VpdElkIjoiYXV0aFYyIiwiY3JpdCI6WyJjaXJjdWl0SWQiXSwidHlwIjoiYXBwbGljYXRpb24vaWRlbjMtemtwLWpzb24ifQ.eyJpZCI6IjVlOWZmMGJiLTk1NzctNDNiNS1iZWZlLWQxMWNlMDRkYzZlMiIsInR5cCI6ImFwcGxpY2F0aW9uL2lkZW4zY29tbS1wbGFpbi1qc29uIiwidHlwZSI6Imh0dHBzOi8vaWRlbjMtY29tbXVuaWNhdGlvbi5pby9hdXRob3JpemF0aW9uLzEuMC9yZXNwb25zZSIsInRoaWQiOiI3ZjM4YTE5My0wOTE4LTRhNDgtOWZhYy0zNmFkZmRiOGI1NDIiLCJmcm9tIjoiZGlkOnBvbHlnb25pZDpwb2x5Z29uOm11bWJhaToycU1ZN3h5bWFYV2RGRHQ3NHhSMXo4bVlyelNZQkMxVmVTV3c2WmhjU1AiLCJ0byI6ImRpZDpwb2x5Z29uaWQ6cG9seWdvbjptdW1iYWk6MnFEeXkxa0VvMkFZY1AzUlQ0WEdlYTdCdHhzWTI4NXN6ZzZ5UDlTUHJzIiwiYm9keSI6eyJkaWRfZG9jIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy9ucy9kaWQvdjEiXSwiaWQiOiJkaWQ6cG9seWdvbmlkOnBvbHlnb246bXVtYmFpOjJxTVk3eHltYVhXZEZEdDc0eFIxejhtWXJ6U1lCQzFWZVNXdzZaaGNTUCIsInNlcnZpY2UiOlt7ImlkIjoiZGlkOnBvbHlnb25pZDpwb2x5Z29uOm11bWJhaToycU1ZN3h5bWFYV2RGRHQ3NHhSMXo4bVlyelNZQkMxVmVTV3c2WmhjU1AjcHVzaCIsInR5cGUiOiJwdXNoLW5vdGlmaWNhdGlvbiIsInNlcnZpY2VFbmRwb2ludCI6Imh0dHBzOi8vcHVzaC1zdGFnaW5nLnBvbHlnb25pZC5jb20vYXBpL3YxIiwibWV0YWRhdGEiOnsiZGV2aWNlcyI6W3siY2lwaGVydGV4dCI6IllleWRnWnBWRXVFRFM5VnV6OEhGL0lVWDJFUS9admxWZjZHYWVJZWJVQ005SGc1bk5maHZhZEpjL0JMd25GejJEK1l0L29vMkdEYnpjZittcEpOcCt4di9Zb2dxbjl0Q3lJVU9icTdJYVpJdUVTZXhoL1VhdCtTZnZHODdJSks1M0hKR1JJTHU4VzF3SHdVeVFZeGR5YUtCaWtmTnRZajdZdFdNS0dXUTVSNnlwWnFBUG8rZjQzNUtjZ3B4R1EybVRMNHRNMmpWRWxaZjlVTVhEeDl1b0QrdU9sbzJQb2hIamNnUDNLZDVqYVNsZmV2T0ZMc0JGVmFseWVzbWNjMldqYzU4KzVDTUxabm5tSkU0Vkl3Q1Nwd1NOb2ZNM1FvREEyOHA0eVR1ay9VaHhUbUNzSVNMN3hyNkRCa3MzN3NyUmpUNkF0QU90QkZKTXljZk5JUFAvd1ROSUVmanp3VXN3Vlg2Zmpzd2tYbmtScWQ5QWVlK1U0Y25jSFMvdWw4U21DLzhpNGx2b083KzhHTjE1TlJaTk1oV2tNL0RNSVMrRVNWYnhCTVdJSWJUWktFbVErWXRERGJhMEI4R09OSU92Zi93eDhoU1IxL1NwTCtFMDhXTDU4UmlKWTNuUFhvS0dZK1RtQlplM2UwdklVS2pzcUpVRmhhUG91MUlxa2E2QU9PTXVuNWxaMUQvNVBnb2YvOTFOWTdIYzd5TXA4Wjd4a1VJZEhEa216U3VrSk5XTjNvV2VYVURsZDdFUkV4Ym4zZ2xYSEVLRjFkZzVJRm4rejIvV0xJbnFlSGpZa2xrOE8rdnh6YlZpSUVWWkM0TXErUG1EMDU4Nk9qdklQTlZhWkpaMllUZmlJRmZJUUh5Y2hoaEhOVDFTdko3TnRXaG1RMHZFc2tJY3JBPSIsImFsZyI6IlJTQS1PQUVQLTUxMiJ9XX19XX0sIm1lc3NhZ2UiOm51bGwsInNjb3BlIjpbeyJpZCI6MSwiY2lyY3VpdElkIjoiY3JlZGVudGlhbEF0b21pY1F1ZXJ5U2lnVjIiLCJwcm9vZiI6eyJwaV9hIjpbIjE1ODg0MTQzNjg5MTg2NTYwNzcwNjEzMjc3NTg1Mzk0NzkwMzM5ODMzMjE2NTUxMzM0NDU1MjU5MDU3MTA0NjI1MzMwMDcyNTM0NTEzIiwiMzI3OTA4NzYxMjAyMjcxMjAwMjM0NjI0NjQ0OTExOTM4MjkxMTYyNjAyMDEwNjA0MzQxNDc5ODUzODc5Njk4MzIwNDYyNTU2MTYyNyIsIjEiXSwicGlfYiI6W1siMTc0ODM4Mjc4OTMzNjMwMDgzNTk2NzcxOTc3NTY1ODg3MjU4NzQ4NDc3Nzg3Mzk4OTkzNzAzNDc0MTg4MzIxMDA0ODg4OTQ4NjI1OTIiLCIxODU4MTk5MDQwNDk2MTY2MjM3NTQ2ODg5NTE1NTA2MzM1MjI1Mjk3NzQwNDc0NDExNjU5MDIzNDcxNDMyNjkxNjc4NTg1ODgzNTk2NiJdLFsiMTUwNTY0NjYxMzIxNjMxNzkwNTYzNTY3NDg1NDgxMDM1ODEyMzgwNjU4Nzg3NjM2OTQ5MTE4NjE0NjM4MTI2NzE3NTUyNzM5ODQxNDkiLCI3NDQ4NDU1Mjg5ODEwMTI4MTY1NTUzOTU2Mjc1MDc3NzI2MDQyNDc4OTc0NzY0NzMwMjMxNTY0Mzg5Njc0MTU5NDAwNDgwMTI5ODYiXSxbIjEiLCIwIl1dLCJwaV9jIjpbIjI4NDA0NjIyNTU5OTA5MjM1NjE5MzU1NzU2NjUyNDY5ODY3MDM0MjQyMTc1MzA0NDIzOTUxMzY4NzY4Njg4MTYyOTk5NzkyOTI1NzQiLCI3OTM0MDU2NjA1MTcyNjU4MTQ5MjEyNzAyMzE2NDIxNTg5OTk0ODgyMDIwMjUxMzM1OTkxNDU1OTE3NzI0ODkwMzI1Mjk3MjM4MjM4IiwiMSJdLCJwcm90b2NvbCI6Imdyb3RoMTYiLCJjdXJ2ZSI6ImJuMTI4In0sInB1Yl9zaWduYWxzIjpbIjEiLCIyMTk5NjMxNzg0MzA2ODkxOTQyNTkwMDI4NDIwODg5Mjg3MTIzMzkwMDY5NjI3OTk4MDY5NTYwMjYxMjY4NjQ4OTAxMjA4MTE1NCIsIjIxMjA1MDIxNTQyNzU2Nzc3MDE2ODYwNDY5MTkxMzg1OTAwMTY0MTM1MzQwNDA4NzU2NDY1MDY4MTU4MDY5NTQ3NjQxMDcxMTc3NDk0IiwiMSIsIjI0ODI2ODQ1NTI3MTgyMTY4NDY2NzgyNjcwODI4NDI4Mzc1MTUxNjU2NjQzNzU5MTc0MjE5Njg2Njg2ODE5MDYxMzk5MTYzMzk0IiwiMSIsIjc1NDU4NTYwNzQ3MDMxNDU4OTQ4NjUyMTM5NzcwNTIzMjA4ODMyNTI0MjYzOTc2NTYxMjIwNTkxMzQ3NDI1NTk4NzU5OTU5MjUwMzEiLCIxNjc1MzMwOTk0IiwiNzQ5NzczMjc2MDA4NDgyMzEzODU2NjMyODAxODE0NzYzMDc2NTciLCIwIiwiMjAzNzYwMzM4MzIzNzExMDkxNzc2ODMwNDg0NTYwMTQ1MjU5MDUxMTkxNzM2NzQ5ODU4NDM5MTU0NDU2MzQ3MjYxNjc0NTA5ODk2MzAiLCIwIiwiMiIsIjIwMDAwMTAxIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIiwiMCIsIjAiLCIwIl19XX19.eyJwcm9vZiI6eyJwaV9hIjpbIjEwMjk0NzY4MzQ5NzcxOTAwMjgwNjcyMTQzMjkwMDM2MDk0Mjg5OTgyODM2OTU1MDMwMDQwMzE3MjA5NTcxMDQ2NDY5MTgzNDM2NjUwIiwiODQ2NjE1MjIxMzA3NDA2MTMxNDU5NjE5MTcxODAzNjIzMzgyNjEwMjAyMDg0NzM4NTMxMDY3NDg2ODgxODY1OTIyNjIwNDQxNDU2NyIsIjEiXSwicGlfYiI6W1siMTEyMTg5ODIxMDk0Njc1NTU0MDExMDI5ODM5MTc5OTk3OTYyOTc1MjI1MjI2NDI4ODE0Njg3MTkyNTYwMTk0Mzc4NDU4OTQ2OTU4OTAiLCIyMDM0MDI5NzIxOTA1MDgyNDQyNjk1OTQ5OTQ4NDc5MTA5NzAyNDkyMTIxNjI4MzE0ODU4ODEwNTE3NjEyMDU4MzgxNTM2NDg0NTMxMSJdLFsiNDM5NDQ5OTc4MTY2OTE4ODI4Mjc2MzM3NTc2ODE2MTM2NzQwODQ0Mzk4NjY5NTM4ODU3MTcwNDgxNDYxNjI4Njg5ODgwNTM2ODYzOCIsIjExOTEwNjE0NTczMDM3MDUzMzkxODc3OTMzMTU0MjQ0MzM3ODcxOTE1Nzc5MDAzMDkwMzA0OTYxNzM0NjAzNzUxNzEzNTI5NzY4NCJdLFsiMSIsIjAiXV0sInBpX2MiOlsiMjA3Mjk5MjA5MTI3ODE3NDA2MDM5NTQ4OTExNTY2NDkwMDY1MjQzMzE5NzEwNjg4NjQxNzQwMTYyNjYwMDQ5MDUwMTYwNjExNjUzMDMiLCIxMjI0NjMxMzI0NDQxMjIyMzE3NDMwNTQzNjQzOTI2MDk0MjgzMTI5MzA3MTA4MTkzNTYyOTUzMjIzODI3MTgzNDE0MDk3NTE4MTkwNiIsIjEiXSwicHJvdG9jb2wiOiJncm90aDE2IiwiY3VydmUiOiJibjEyOCJ9LCJwdWJfc2lnbmFscyI6WyIyMTk5NjMxNzg0MzA2ODkxOTQyNTkwMDI4NDIwODg5Mjg3MTIzMzkwMDY5NjI3OTk4MDY5NTYwMjYxMjY4NjQ4OTAxMjA4MTE1NCIsIjg2MTgzNjg2NzI2ODA1NTk5NTYxMTc4Mjg4NzI3MzY4OTI4NDY1OTQ2NjIyNDQ4Njc4NjcwMDIyNTkwNjMxNjM5MTk4MzE5MzU1OTIiLCI1MTUzMzUwNDEyMTg5NjMwNzkwNDk5NzAxMTA3MTc1NDc1MjgxNDY1MjQ2NDY3MTc3MzY5NjYyMTE3OTAzNTY1NjUzMDc2NjY4MDIzIl19";

  console.log("tokenStr", tokenStr);

  const authRequest = JSON.parse(
    (await redis.hget("request", sessionId ?? "")) ?? ""
  );
  if (!sessionId) throw new Error("No auth request found");

  // The CredentialAtomicQuerySigValidator contract is used to verify any credential-related zk proof
  // generated by the user using the credentialAtomicQuerySigV2OnChain circuit.
  // https://0xpolygonid.github.io/tutorials/contracts/overview/#blockchain-addresses
  const mumbaiContractAddress = "0x134B1BE34911E39A8397ec6289782989729807a4";
  const circuitsDir = "../../keys";

  const ethStateResolver = new resolver.EthStateResolver(
    process.env.RPC_URL_MUMBAI ?? "",
    mumbaiContractAddress
  );

  const resolvers = {
    ["polygon:mumbai"]: ethStateResolver,
  };

  const verifier = await auth.Verifier.newVerifier({
    stateResolver: resolvers,
    circuitsDir: path.join(__dirname, circuitsDir),
  });

  const opts = {
    AcceptedStateTransitionDelay: 5 * 60 * 1000, // 5 minutes
  };

  return await verifier.fullVerify(tokenStr, authRequest, {
    acceptedStateTransitionDelay: opts.AcceptedStateTransitionDelay,
  });
}
